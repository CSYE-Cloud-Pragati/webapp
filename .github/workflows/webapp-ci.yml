name: webapp-ci

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Continuous Integration Test
    runs-on: ubuntu-latest
    environment: dev

    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASSWORD }}
      DB_HOST: localhost
      DB_PORT: ${{ secrets.DB_PORT }}
      AUTHENTICATION_ENABLED: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - name: Install Dependencies
        run: npm install

      - name: Start PostgreSQL (Using Secrets)
        run: |
          docker run -d --name postgres_container \
            -e POSTGRES_DB=${{ secrets.DB_NAME }} \
            -e POSTGRES_USER=${{ secrets.DB_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -p 5432:5432 postgres:latest

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            if docker exec postgres_container pg_isready -U $DB_USER; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Waiting for PostgreSQL to be ready... retry $i"
            sleep 5
          done
          exit 1

      - name: Configure Environment Variables
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "PORT=${{ secrets.DB_PORT }}" >> .env
          echo "AUTHENTICATION_ENABLED=true" >> .env

      - name: Run Tests
        run: npm test
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: localhost
          DB_PORT: ${{ secrets.DB_PORT }}
          AUTHENTICATION_ENABLED: true

      - name: Stop PostgreSQL Container
        run: docker stop postgres_container && docker rm postgres_container