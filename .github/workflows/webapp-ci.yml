name: webapp-ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Run tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      AUTHENTICATION_ENABLED: ${{ secrets.AUTHENTICATION_ENABLED }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
      
      - name: Install dependencies
        run: npm install

      # - name: Install PostgreSQL client
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for Postgres to be ready..."
          for i in {1..10}; do
            if pg_isready -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER}; then
              echo "Postgres is ready!"
              exit 0
            fi
            echo "Postgres is unavailable - sleeping"
            sleep 3
          done
          echo "Postgres failed to start"
          exit 1

      - name: Create database and user
        run: |
          PGPASSWORD="postgres" psql -h 127.0.0.1 -p 5432 -U postgres <<-EOSQL

            DO \$\$
            BEGIN
              IF NOT EXISTS (
                SELECT FROM pg_database 
                WHERE datname = '${DB_NAME}'
              ) THEN
                EXECUTE 'CREATE DATABASE ${DB_NAME}';
              END IF;
            END
            \$\$;

            DO \$\$
            BEGIN
              IF NOT EXISTS (
                SELECT FROM pg_catalog.pg_roles 
                WHERE rolname = '${DB_USER}'
              ) THEN
                EXECUTE 'CREATE USER ${DB_USER} WITH ENCRYPTED PASSWORD ''${DB_PASSWORD}''';
              END IF;
            END
            \$\$;

            GRANT ALL PRIVILEGES ON DATABASE "${DB_NAME}" TO "${DB_USER}";
          EOSQL


      - name: Run tests
        run: npm test
