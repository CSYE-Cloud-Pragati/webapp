name: ami-build-ci

on:
  push:
    branches:
      - main
  workflow_dispatch:
    

jobs:
  test:
    name: ami-build
    runs-on: ubuntu-latest
    if: github.repository == 'CSYE-Cloud-Pragati/webapp'

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DB_HOST: 127.0.0.1
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      PORT: ${{ secrets.PORT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AMI_USERS: ${{ secrets.AMI_USERS }}
      AUTHENTICATION_ENABLED: ${{ secrets.AUTHENTICATION_ENABLED }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID}}
      GCP_SA_KEY:  ${{ secrets.GCP_SA_KEY}}
      GCP_ZONE: ${{ secrets.GCP_ZONE}}

      DEMO_AWS_ACCESS_KEY: ${{ secrets.DEMO_AWS_ACCESS_KEY }}
      DEMO_AWS_SECRET_KEY: ${{ secrets.DEMO_AWS_SECRET_KEY }}
      DEMO_AWS_ACCOUNT_ID: ${{ secrets.DEMO_AWS_ACCOUNT_ID }}
      
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:

    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 3: Zip creation 
    - name: Create Zip File
      run: |
          zip -r webapp.zip .

    - name: Upload Zip File
      uses: actions/upload-artifact@v4
      with:
          name: webapp zip creation
          path: webapp.zip
          
    - name: Moving Zip to APP_TEST
      run: |
          ls
          pwd
          sudo mv /home/runner/work/webapp/webapp/webapp.zip /home/runner/work/webapp/webapp/src/

    # Step 4: Run the packer
    - name: Run Packer
      run: |
          # Install Packer
          curl -fsSL https://releases.hashicorp.com/packer/1.7.3/packer_1.7.3_linux_amd64.zip -o packer.zip
          unzip packer.zip
          sudo mv packer /usr/local/bin/
          ls
          pwd
          cd src
          packer init ubuntu.pkr.hcl
          packer build \
            -var 'db_name=${{ secrets.DB_NAME }}' \
            -var 'db_user=${{ secrets.DB_USERNAME }}' \
            -var 'db_password=${{ secrets.DB_PASSWORD }}' \
            -var 'aws_region=${{ secrets.AWS_REGION }}' \
            -var 'source_ami=${{ secrets.SOURCE_AMI }}' \
            -var 'aws_access_key=${{ secrets.AWS_ACCESS_KEY }}' \
            -var 'aws_secret_key=${{ secrets.AWS_SECRET_KEY }}' \
            -var 'ami_users=${{ secrets.AMI_USERS }}' \
            ubuntu.pkr.hcl

    - name: SHARE AMI WITH DEMO AWS ACCOUNT
      run: |
          # EXTRACT AMI ID FROM PACKER_OUTPUT.TXT (ASSUMING THE LINE CONTAINS "AMI: <AMI_ID>")
          AMI_ID=$(grep 'AMI:' packer_output.txt | awk '{print $NF}')
          echo "AMI_ID: $AMI_ID"
          aws ec2 modify-image-attribute \
            --image-id $AMI_ID \
            --launch-permission "Add=[{UserId=${{ secrets.DEMO_AWS_ACCOUNT_ID }} }]" \
            --region ${{ secrets.AWS_REGION }}

      # CONFIGURE AWS CLI FOR DEMO ACCOUNT
    - name: CONFIGURE AWS CLI FOR DEMO ACCOUNT
      run: |
          aws configure set aws_access_key_id ${{ secrets.DEMO_AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.DEMO_AWS_SECRET_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      # CREATE A NEW LAUNCH TEMPLATE VERSION WITH THE LATEST AMI ID
    - name: UPDATE LAUNCH TEMPLATE WITH LATEST AMI
      run: |
          # EXTRACT THE AMI ID FROM PACKER_OUTPUT.TXT
          AMI_ID=$(grep 'AMI:' packer_output.txt | awk '{print $NF}')
          echo "UPDATING LAUNCH TEMPLATE WITH AMI_ID: $AMI_ID"
          # GET THE LAUNCH TEMPLATE ID BY FILTERING ON NAME (ASSUMING "webapp_lt_" PREFIX)
          LT_ID=$(aws ec2 describe-launch-templates --filters "Name=launch-template-name,Values=webapp_lt_*" --query "LaunchTemplates[0].LaunchTemplateId" --output text --region ${{ secrets.AWS_REGION }})
          # CREATE A NEW VERSION WITH THE NEW AMI ID
          aws ec2 create-launch-template-version \
            --launch-template-id $LT_ID \
            --version-description "UPDATE TO AMI $AMI_ID" \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --region ${{ secrets.AWS_REGION }}

      # ISSUE INSTANCE REFRESH ON THE AUTO SCALING GROUP
    - name: ISSUE INSTANCE REFRESH ON ASG
      run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name csye6225_asg \
            --preferences "MinHealthyPercentage=90,InstanceWarmup=300" \
            --region ${{ secrets.AWS_REGION }}

      # WAIT FOR INSTANCE REFRESH TO COMPLETE
    - name: WAIT FOR ASG INSTANCE REFRESH TO COMPLETE
      run: |
          echo "WAITING FOR ASG INSTANCE REFRESH TO COMPLETE..."
          REFRESH_STATUS="InProgress"
          TIMEOUT=600
          INTERVAL=30
          ELAPSED=0
          while [ "$REFRESH_STATUS" = "InProgress" ] && [ $ELAPSED -lt $TIMEOUT ]; do
              sleep $INTERVAL
              ELAPSED=$((ELAPSED+INTERVAL))
              REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name csye6225_asg --query "InstanceRefreshes[0].Status" --output text --region ${{ secrets.AWS_REGION }})
              echo "STATUS: $REFRESH_STATUS, ELAPSED: $ELAPSED SECONDS"
          done
          if [ "$REFRESH_STATUS" != "Successful" ]; then
              echo "INSTANCE REFRESH FAILED OR TIMED OUT."
              exit 1
          fi
          echo "INSTANCE REFRESH COMPLETED SUCCESSFULLY."

